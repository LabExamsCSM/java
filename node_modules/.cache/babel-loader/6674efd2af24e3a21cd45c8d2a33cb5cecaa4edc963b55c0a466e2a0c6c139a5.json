{"ast":null,"code":"export const DataJava = [{\n  unit: 1,\n  title: `Design a Java class Circle`,\n  code: `\n        class Circle {\n            private double radius;\n        \n            // default constructor\n            Circle() {\n                radius = 0.0;\n            }\n        \n            // parameterized constructor\n            Circle(double radius) {\n                this.radius = radius;\n            }\n        \n            // setters\n            void radius_setter(double radius) {\n                this.radius = radius;\n            }\n        \n            // getters\n            double radius_getter() {\n                return radius;\n            }\n        \n            // area method\n            void area() {\n        \n                System.out.println(\"The area of circle is : \" + 3.14 * radius * radius);\n            }\n        \n            // circumference\n            void circumference() {\n                System.out.println(\"The circumference of circle is : \" + 2 * 3.14 * radius);\n            }\n        \n        }\n        \n        class Testing {\n            public static void main(String args[]) {\n        \n                // instantiating with default constructor\n                Circle c1 = new Circle();\n                // instantiating with parameterized constructor\n                Circle c2 = new Circle(2.0);\n        \n                // setting radius of circle c1 by radius_setter() function\n                c1.radius_setter(1.0);\n        \n                // accessing radius (private) of circle c2 by radius_getter() function\n                System.out.println(\"The radius of circle c2 is : \" + c2.radius_getter());\n        \n                // calling area function for circle c1\n                c1.area();\n        \n                // calling circumference function for circle c2\n                c2.circumference();\n        \n            }\n        }        \n        `\n}, {\n  unit: 1,\n  title: `Design a Java class MathOperations`,\n  code: `\n        class MathOperations {\n            public final double PI = 3.141592;\n            public final double PI_2 = 0.31818181818;\n            public final double SQRT2 = 1.41421356237;\n            public final double SQRT1_2 = 0.70710678118;\n        \n            public static void max(int a, int b) {\n                if (a > b) {\n                    System.out.println(a + \" is maximum\");\n                } else {\n                    System.out.println(b + \" is maximum\");\n                }\n            }\n        \n            public static void max(int a, int b, int c) {\n                if (a > b && a > c) {\n                    System.out.println(a + \" is maximum\");\n                } else if (b > a && b > c) {\n                    System.out.println(b + \" is maximum\");\n                } else {\n                    System.out.println(c + \" is maximum\");\n                }\n            }\n        \n            public static void min(int a, int b) {\n                if (a < b) {\n                    System.out.println(a + \" is minimum\");\n                } else {\n                    System.out.println(b + \" is minimum\");\n                }\n            }\n        \n            public static void min(int a, int b, int c) {\n                if (a < b && a < c) {\n                    System.out.println(a + \" is minimum\");\n                } else if (b < a && b < c) {\n                    System.out.println(b + \" is minimum\");\n                } else {\n                    System.out.println(c + \" is minimum\");\n                }\n            }\n        \n            public static void factorial(int n) {\n                int fact = 1;\n                int i;\n                for (i = 1; i <= n; i++) {\n                    fact = i * fact;\n                }\n                System.out.println(\"The factorial of \" + n + \" is \" + fact);\n            }\n        \n            public static void main(String args[]) {\n                MathOperations m = new MathOperations();\n                System.out.println(m.PI);\n                System.out.println(m.PI_2);\n                System.out.println(m.SQRT2);\n                System.out.println(m.SQRT1_2);\n        \n                max(4, 5);\n                max(4, 5, 3);\n                min(1, 2);\n                min(4, 5, 3);\n                factorial(5);\n            }\n        }\n        \n        `\n}, {\n  unit: 1,\n  title: `cylinder, circle, shapes2d, shapes3d`,\n  code: `\n        //--------------------Cricle.java--------------------------\n        package shapes;\n        \n        interface shape2d {\n            public double getSurfaceArea();\n        \n            public double getPerimeter();\n        }\n        \n        interface shape3d {\n            public double getVolume();\n        }\n        \n        public class circle implements shape2d {\n            private double rad;\n        \n            public circle(double r) {\n                rad = r;\n            }\n        \n            public circle() {\n                rad = 0.0;\n            }\n        \n            public double getRadius() {\n                return rad;\n            }\n        \n            public double getSurfaceArea() {\n                return 3.14 * this.rad * this.rad;\n            }\n        \n            public double getPerimeter() {\n                return 2 * 3.14 * this.rad;\n            }\n        \n            public String toString() {\n                return \"circle with radius is\" + \" \" + getRadius();\n            }\n        }\n        // --------------------Cylinder.java--------------------------\n        package shapes;\n        \n        public class cylinder extends circle implements shape3d{\n            private double ht;\n            double ra;\n            public cylinder(){\n               super(0);\n                ht=0.0;\n            }\n            public cylinder(double r,double h){\n               super(r);\n                ht=h;\n            }\n            public double getHeight(){\n                return ht;\n            }\n            public double getVolume(){\n                return Math.PI*super.getRadius()*super.getRadius()*this.ht;\n            }\n            public String toString(){\n                return \"cylinder with radius \"+super.getRadius()+\"and the height=\"+getHeight();\n            }\n        }\n        \n        // --------------------testShapes.java--------------------------\n        import shapes.circle;\n        import shapes.cylinder;\n        import java.util.Scanner;\n        \n        class testshapes {\n            public static void main(String[] args) {\n                Scanner sc = new Scanner(System.in);\n                System.out.println(\"enter rad for circle\");\n                circle c = new circle(sc.nextDouble());\n                System.out.println(c);\n                System.out.println(\"area =\" + c.getSurfaceArea());\n                System.out.println(\"permeter=\" + c.getPerimeter());\n                System.out.println(\"enter hgt for cylinder\");\n                cylinder cy = new cylinder(c.getRadius(), sc.nextDouble());\n        \n                System.out.println(\"the volume=\" + cy.getVolume());\n                System.out.println(\"the area by clin for circle is=\" + cy.getSurfaceArea());\n            }\n        }\n        `\n}, {\n  unit: 1,\n  title: `Design a StackException class which extends Exception`,\n  code: `\n        class StackException extends Exception {\n            private String msg;\n        \n            StackException() {\n                msg = \" OOPS! an error occured \";\n            }\n        \n            StackException(String msg) {\n                this.msg = msg;\n            }\n        \n            String getter() {\n                return msg;\n            }\n        \n            void setter(String msg) {\n                this.msg = msg;\n            }\n        \n            public String toString() {\n                return msg;\n            }\n        }\n        \n        class Stack {\n            private int arr[] = new int[5];\n            private int top;\n        \n            Stack() {\n                top = -1;\n            }\n        \n            void push(int ele) throws StackException {\n                if (top == 4) {\n                    StackException e = new StackException(\" OOPS! it's an Overflow \");\n                    throw e;\n                } else {\n                    arr[++top] = ele;\n                }\n            }\n        \n            int pop() throws StackException {\n                if (top == -1) {\n                    StackException e = new StackException(\" OOPS! it's an Underflow \");\n                    throw e;\n                }\n                return arr[top--];\n            }\n        \n        }\n        \n        class Testing {\n            public static void main(String args[]) {\n                int i;\n                Stack s1 = new Stack();\n                for (i = 0; i < 6; i++) {\n                    try {\n                        s1.push(1);\n                    } catch (StackException e) {\n                        System.out.println(e);\n                    }\n                }\n                for (i = 0; i < 6; i++) {\n                    try {\n                        System.out.println(s1.pop());\n                    } catch (StackException e) {\n                        System.out.println(e);\n                    }\n                }\n            }\n        }\n        \n        `\n}, {\n  unit: 1,\n  title: `Implement Producer Consumer problem`,\n  code: `\n        class Q {\n            int n;\n            boolean status = false;\n        \n            synchronized void put(int n) {\n                if (status == true)\n                    try {\n                        wait();\n                    } catch (InterruptedException e) {\n                        System.out.println(e);\n                    }\n                this.n = n;\n                status = true;\n                System.out.println(\"Put \" + n);\n                notify();\n            }\n        \n            synchronized int get() {\n                if (status == false)\n                    try {\n                        wait();\n                    } catch (InterruptedException e) {\n                        System.out.println(e);\n                    }\n                status = false;\n                System.out.println(\"Got \" + n);\n                notify();\n                return n;\n            }\n        }\n        \n        class producer extends Thread {\n            Q buff;\n        \n            producer(Q q) {\n                buff = q;\n            }\n        \n            public void run() {\n                int i = 1;\n                while (true) {\n                    buff.put(i++);\n                }\n            }\n        }\n        \n        class consumer extends Thread {\n            Q buff;\n        \n            consumer(Q q) {\n                buff = q;\n            }\n        \n            public void run() {\n                while (true) {\n                    buff.get();\n                }\n            }\n        }\n        \n        class dem_TC {\n            public static void main(String arg[]) {\n                Q q = new Q();\n                producer p = new producer(q);\n                consumer c = new consumer(q);\n                c.start();\n                p.start();\n            }\n        }\n        `\n}, {\n  unit: 2,\n  title: `Applet program to display the house using Graphics`,\n  code: `\n        import java.awt.Color;\n        import java.awt.Graphics;\n        import java.awt.Polygon;\n        import java.applet.Applet;\n\n        /*\n        <applet code=\"house.class\" width=400 height=300>\n        </applet>\n        */\n        public class house extends Applet {\n            public void paint(Graphics g) {\n                // house base\n                g.setColor(Color.red);\n                g.fillRect(50, 90, 200, 100);\n                // house outlines\n                g.setColor(Color.blue);\n                g.drawRect(50, 90, 200, 100);\n                // roof\n                Polygon roof = new Polygon();\n                roof.addPoint(50, 90);\n                roof.addPoint(150, 150);\n                roof.addPoint(250, 90);\n                g.setColor(new Color(218, 165, 32));\n                g.fillPolygon(roof);\n                g.setColor(Color.black);\n                g.drawPolygon(roof);\n\n                // windows\n                g.setColor(Color.blue);\n                g.drawLine(75, 123, 105, 123);\n                g.drawLine(190, 110, 190, 134);\n                g.fillRect(70, 110, 5, 25);\n                g.fillRect(105, 110, 5, 25);\n\n            }\n        }\n        `\n}, {\n  unit: 2,\n  title: `Applet that displays a scrolling or animated banner with text.`,\n  code: `\n        import java.awt.*;\n\n        import java.applet.Applet;\n        \n        /*\n        <applet code=\"textBanner.class\" width=400 height=300>\n        </applet>\n        */\n        public class textBanner extends Applet implements Runnable {\n            String ss;\n        \n            public void init() {\n                ss = \"Hi How are you\";\n                try {\n                    Thread t = new Thread(this);\n                    t.start();\n                } catch (Exception e) {\n                    System.out.println(e);\n                }\n            }\n        \n            public void paint(Graphics g) {\n                g.drawString(ss, 20, 30);\n                g.setFont(new Font(\"Arial\", Font.PLAIN, 30));\n            }\n        \n            public void run() {\n                while (true) {\n                    char c = ss.charAt(0);\n                    String s1 = ss.substring(1, ss.length());\n                    ss = s1 + c;\n                    repaint();\n                    try {\n                        Thread.sleep(1000);\n                    } catch (Exception e) {\n                        System.out.println(e);\n                    }\n                }\n            }\n        }\n        `\n}, {\n  unit: 2,\n  title: `a login form with fields for username and password.`,\n  code: `\n        import java.awt.event.*;\n        import javax.swing.*;\n        import java.awt.*;\n        \n        public class login extends JFrame implements ActionListener {\n            Button b1, b2;\n            TextField u;\n            JPasswordField p;\n            JLabel us, pa, er;\n        \n            public login() {\n                setLayout(new FlowLayout());\n                b1 = new Button(\"SUBMIT\");\n                b2 = new Button(\"CLEAR\");\n                b1.addActionListener(this);\n                b2.addActionListener(this);\n                u = new TextField(20);\n                p = new JPasswordField(16);\n                us = new JLabel(\"Username\");\n                pa = new JLabel(\"password\");\n                JPanel p1 = new JPanel(new FlowLayout());\n                p1.add(us);\n                p1.add(u);\n                p1.add(pa);\n                p1.add(p);\n                p1.add(b1);\n                p1.add(b2);\n                add(p1);\n                er = new JLabel();\n                add(er);\n                setBounds(100, 100, 400, 300);\n                setVisible(true);\n            }\n        \n            public static void main(String arg[]) {\n                new login();\n            }\n        \n            public void actionPerformed(ActionEvent e) {\n                String s = e.getActionCommand();\n                String usr, pass;\n                usr = u.getText();\n                pass = new String(p.getPassword());\n                if (s.equals(\"SUBMIT\")) {\n                    if (usr.isEmpty() || pass.isEmpty())\n                        er.setText(\"ENTER ALL FIELDS\");\n                    else if ((usr.equals(\"y22cm107\")) && (pass.equals(\"1234\")))\n                        er.setText(\"Loggined succesfully\");\n                    else\n                        er.setText(\"Username or Password is incorrect\");\n                } else if (s.equals(\"CLEAR\")) {\n                    u.setText(\"\");\n                    p.setText(\"\");\n                    er.setText(\"\");\n                }\n            }\n        }\n        `\n}, {\n  unit: 2,\n  title: `JTree`,\n  code: `\n        import javax.swing.*;\n        import javax.swing.JFrame;\n        import javax.swing.JScrollPane;\n        import javax.swing.tree.DefaultMutableTreeNode;\n        \n        /*\n         <applet code=\"jtree.class\" width=400 height=300>\n         </applet>\n        */\n        public class jtree extends JFrame {\n            JTree tree;\n        \n            public jtree() {\n                super(\"JTREE\");\n                DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"RVRJC\");\n        \n                DefaultMutableTreeNode cb = new DefaultMutableTreeNode(\"Circuit branches\");\n                root.add(cb);\n        \n                DefaultMutableTreeNode cs = new DefaultMutableTreeNode(\"Computer sciemce\");\n                cb.add(cs);\n                DefaultMutableTreeNode cse = new DefaultMutableTreeNode(\"CSE\");\n                cs.add(cse);\n                DefaultMutableTreeNode cm = new DefaultMutableTreeNode(\"CSE(AI&ML)\");\n                cs.add(cm);\n                DefaultMutableTreeNode csd = new DefaultMutableTreeNode(\"CSE(DS)\");\n                cs.add(csd);\n        \n                DefaultMutableTreeNode ncs = new DefaultMutableTreeNode(\"Non Circuit Branches\");\n                root.add(ncs);\n        \n                DefaultMutableTreeNode ece = new DefaultMutableTreeNode(\"ECE\");\n                ncs.add(ece);\n                DefaultMutableTreeNode eee = new DefaultMutableTreeNode(\"EEE\");\n                ncs.add(eee);\n        \n                tree = new JTree(root);\n                JScrollPane jsp = new JScrollPane(tree);\n                add(jsp);\n                setVisible(true);\n            }\n        \n            public static void main(String args[]) {\n                new jtree();\n            }\n        }\n        \n        `\n}, {\n  unit: 2,\n  title: `Design JTabbedPane with three tabs`,\n  code: `\n        import javax.swing.*;\n        import java.awt.FlowLayout;\n        import java.awt.GridLayout;\n        \n        public class tabs {\n            public static void main(String args[]) {\n                JFrame frame = new JFrame(\"Jtabs\");\n                frame.setSize(400, 300);\n                frame.setLayout(new FlowLayout());\n        \n                JTabbedPane pane = new JTabbedPane();\n        \n                JPanel panel1 = new JPanel();\n                panel1.setLayout(new GridLayout(4, 1));\n                JCheckBox cb1 = new JCheckBox(\"Math-I\");\n                JCheckBox cb2 = new JCheckBox(\"Chemistry\");\n                JCheckBox cb3 = new JCheckBox(\"FCS\");\n                JCheckBox cb4 = new JCheckBox(\"ESCC\");\n                panel1.add(cb1);\n                panel1.add(cb2);\n                panel1.add(cb3);\n                panel1.add(cb4);\n        \n                JPanel panel2 = new JPanel();\n                panel2.setLayout(new GridLayout(4, 1));\n                JRadioButton rb1 = new JRadioButton(\"Math-II\");\n                JRadioButton rb2 = new JRadioButton(\"physics\");\n                JRadioButton rb3 = new JRadioButton(\"Data Structures\");\n                JRadioButton rb4 = new JRadioButton(\"Python\");\n                panel2.add(rb1);\n                panel2.add(rb2);\n                panel2.add(rb3);\n                panel2.add(rb4);\n        \n                JPanel panel3 = new JPanel();\n                panel3.setLayout(new GridLayout());\n                String[] data = {\n                        \"statistics\",\n                        \"oops\",\n                        \"dbms\",\n                        \"dms\"\n                };\n                JList<String> list = new JList<>(data);\n                panel3.add(list);\n        \n                pane.addTab(\"1 year 1 sem courses\", panel1);\n                pane.addTab(\"1 year 2 sem courses\", panel2);\n                pane.addTab(\"2 year 1 sem courses\", panel3);\n        \n                frame.add(pane);\n                frame.setVisible(true);\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            }\n        }\n        \n        `\n}, {\n  unit: 2,\n  title: `Display the following Data with JTable`,\n  code: `\n        import javax.swing.*;\n\n        public class jtable extends JFrame {\n            public jtable() {\n                super(\"j table \");\n                setBounds(100, 100, 400, 300);\n                String[][] data = {\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\n                        { \"1\", \"e1\", \"mohan\", \"1000\" }\n                };\n                String header[] = { \"sno\", \"employee id\", \"name\", \"salary\" };\n                JTable jt = new JTable(data, header);\n                JScrollPane jsp = new JScrollPane(jt);\n                add(jsp);\n                setVisible(true);\n            }\n        \n            public static void main(String args[]) {\n                new jtable();\n            }\n        }\n        `\n}, {\n  unit: 1,\n  title: `Create a generic function to sort n integers`,\n  code: `\n        import java.util.Arrays;\n\n        public class Sort {\n\n            public static void main(String[] args) {\n                int[] numbers = {5, 2, 8, 1, 7};\n                \n                System.out.print(\"Original array: \");\n                printArray(numbers);\n                \n                genericSort(numbers);\n                \n                System.out.print(\"Sorted array: \");\n                printArray(numbers);\n            }\n\n            public static void genericSort(int[] arr) {\n                Arrays.sort(arr);\n            }\n\n            public static void printArray(int[] arr) {\n                for (int i=0; i<arr.length;i++) {\n                    System.out.print(arr[i] + \" \");\n                }\n                System.out.println();\n            }\n        }`\n}, {\n  unit: 1,\n  title: `Simple Calculator`,\n  code: `\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class calsopr extends Frame implements ActionListener {\n    String val, op;\n    Button b1[] = new Button[16];\n    TextField tx1;\n    Panel p1;\n    int F, S, R, C;\n\n    public calsopr() {\n        val = \"0\";\n        op = \"\";\n        F = S = R = C = 0;\n        p1 = new Panel();\n        tx1 = new TextField(\"0\", 15);\n        tx1.setEditable(false);\n        p1.setLayout(new GridLayout(4, 4, 5, 5)); // Use setLayout instead of setEditable\n        for (int i = 0; i < 10; i++) {\n            b1[i] = new Button(\"\" + i); // Remove the space before the numbers\n            b1[i].addActionListener(this);\n        }\n        b1[10] = new Button(\"+\");\n        b1[10].addActionListener(this);\n        b1[11] = new Button(\"-\");\n        b1[11].addActionListener(this);\n        b1[12] = new Button(\"*\");\n        b1[12].addActionListener(this);\n        b1[13] = new Button(\"/\");\n        b1[13].addActionListener(this);\n        b1[14] = new Button(\"=\");\n        b1[14].addActionListener(this);\n        b1[15] = new Button(\"C\");\n        b1[15].addActionListener(this);\n        for (int i = 0; i < 16; i++) {\n            p1.add(b1[i]);\n        }\n        add(tx1, BorderLayout.NORTH);\n        add(p1, BorderLayout.CENTER);\n        setSize(200, 200);\n        setVisible(true);\n    }\n\n    public void actionPerformed(ActionEvent ae) {\n        String type = ae.getActionCommand();\n        if (type.equals(\"+\") || type.equals(\"-\") || type.equals(\"*\") || type.equals(\"/\"))\n            op = type;\n        if (type.matches(\"\\\\d\")) {\n            tx1.setText(type);\n            if (C == 0) {\n                F = Integer.parseInt(tx1.getText());\n                C = 1;\n            } else {\n                S = Integer.parseInt(tx1.getText());\n                C = 0;\n            }\n        }\n        if (type.equals(\"=\")) {\n            if (op.equals(\"+\")) {\n                R = F + S;\n            } else if (op.equals(\"-\")) {\n                R = F - S;\n            } else if (op.equals(\"*\")) {\n                R = F * S;\n            } else if (op.equals(\"/\")) {\n                if (S != 0) {\n                    R = F / S;\n                } else {\n                    // Handle division by zero error\n                    tx1.setText(\"Error\");\n                    return;\n                }\n            }\n            tx1.setText(\"\" + R);\n        }\n        if (type.equals(\"C\")) {\n            F = S = R = 0;\n            C = 0;\n            tx1.setText(\"0\");\n        }\n    }\n\n    public static void main(String s[]) {\n        new calsopr();\n    }\n}\n\n        `\n}];","map":{"version":3,"names":["DataJava","unit","title","code"],"sources":["C:/Users/Admin/Desktop/wdd-b/src/dataJava.js"],"sourcesContent":["export const DataJava = [\r\n    {\r\n        unit: 1,\r\n        title: `Design a Java class Circle`,\r\n        code: `\r\n        class Circle {\r\n            private double radius;\r\n        \r\n            // default constructor\r\n            Circle() {\r\n                radius = 0.0;\r\n            }\r\n        \r\n            // parameterized constructor\r\n            Circle(double radius) {\r\n                this.radius = radius;\r\n            }\r\n        \r\n            // setters\r\n            void radius_setter(double radius) {\r\n                this.radius = radius;\r\n            }\r\n        \r\n            // getters\r\n            double radius_getter() {\r\n                return radius;\r\n            }\r\n        \r\n            // area method\r\n            void area() {\r\n        \r\n                System.out.println(\"The area of circle is : \" + 3.14 * radius * radius);\r\n            }\r\n        \r\n            // circumference\r\n            void circumference() {\r\n                System.out.println(\"The circumference of circle is : \" + 2 * 3.14 * radius);\r\n            }\r\n        \r\n        }\r\n        \r\n        class Testing {\r\n            public static void main(String args[]) {\r\n        \r\n                // instantiating with default constructor\r\n                Circle c1 = new Circle();\r\n                // instantiating with parameterized constructor\r\n                Circle c2 = new Circle(2.0);\r\n        \r\n                // setting radius of circle c1 by radius_setter() function\r\n                c1.radius_setter(1.0);\r\n        \r\n                // accessing radius (private) of circle c2 by radius_getter() function\r\n                System.out.println(\"The radius of circle c2 is : \" + c2.radius_getter());\r\n        \r\n                // calling area function for circle c1\r\n                c1.area();\r\n        \r\n                // calling circumference function for circle c2\r\n                c2.circumference();\r\n        \r\n            }\r\n        }        \r\n        `,\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`Design a Java class MathOperations`,\r\n        code:`\r\n        class MathOperations {\r\n            public final double PI = 3.141592;\r\n            public final double PI_2 = 0.31818181818;\r\n            public final double SQRT2 = 1.41421356237;\r\n            public final double SQRT1_2 = 0.70710678118;\r\n        \r\n            public static void max(int a, int b) {\r\n                if (a > b) {\r\n                    System.out.println(a + \" is maximum\");\r\n                } else {\r\n                    System.out.println(b + \" is maximum\");\r\n                }\r\n            }\r\n        \r\n            public static void max(int a, int b, int c) {\r\n                if (a > b && a > c) {\r\n                    System.out.println(a + \" is maximum\");\r\n                } else if (b > a && b > c) {\r\n                    System.out.println(b + \" is maximum\");\r\n                } else {\r\n                    System.out.println(c + \" is maximum\");\r\n                }\r\n            }\r\n        \r\n            public static void min(int a, int b) {\r\n                if (a < b) {\r\n                    System.out.println(a + \" is minimum\");\r\n                } else {\r\n                    System.out.println(b + \" is minimum\");\r\n                }\r\n            }\r\n        \r\n            public static void min(int a, int b, int c) {\r\n                if (a < b && a < c) {\r\n                    System.out.println(a + \" is minimum\");\r\n                } else if (b < a && b < c) {\r\n                    System.out.println(b + \" is minimum\");\r\n                } else {\r\n                    System.out.println(c + \" is minimum\");\r\n                }\r\n            }\r\n        \r\n            public static void factorial(int n) {\r\n                int fact = 1;\r\n                int i;\r\n                for (i = 1; i <= n; i++) {\r\n                    fact = i * fact;\r\n                }\r\n                System.out.println(\"The factorial of \" + n + \" is \" + fact);\r\n            }\r\n        \r\n            public static void main(String args[]) {\r\n                MathOperations m = new MathOperations();\r\n                System.out.println(m.PI);\r\n                System.out.println(m.PI_2);\r\n                System.out.println(m.SQRT2);\r\n                System.out.println(m.SQRT1_2);\r\n        \r\n                max(4, 5);\r\n                max(4, 5, 3);\r\n                min(1, 2);\r\n                min(4, 5, 3);\r\n                factorial(5);\r\n            }\r\n        }\r\n        \r\n        `,\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`cylinder, circle, shapes2d, shapes3d`,\r\n        code:`\r\n        //--------------------Cricle.java--------------------------\r\n        package shapes;\r\n        \r\n        interface shape2d {\r\n            public double getSurfaceArea();\r\n        \r\n            public double getPerimeter();\r\n        }\r\n        \r\n        interface shape3d {\r\n            public double getVolume();\r\n        }\r\n        \r\n        public class circle implements shape2d {\r\n            private double rad;\r\n        \r\n            public circle(double r) {\r\n                rad = r;\r\n            }\r\n        \r\n            public circle() {\r\n                rad = 0.0;\r\n            }\r\n        \r\n            public double getRadius() {\r\n                return rad;\r\n            }\r\n        \r\n            public double getSurfaceArea() {\r\n                return 3.14 * this.rad * this.rad;\r\n            }\r\n        \r\n            public double getPerimeter() {\r\n                return 2 * 3.14 * this.rad;\r\n            }\r\n        \r\n            public String toString() {\r\n                return \"circle with radius is\" + \" \" + getRadius();\r\n            }\r\n        }\r\n        // --------------------Cylinder.java--------------------------\r\n        package shapes;\r\n        \r\n        public class cylinder extends circle implements shape3d{\r\n            private double ht;\r\n            double ra;\r\n            public cylinder(){\r\n               super(0);\r\n                ht=0.0;\r\n            }\r\n            public cylinder(double r,double h){\r\n               super(r);\r\n                ht=h;\r\n            }\r\n            public double getHeight(){\r\n                return ht;\r\n            }\r\n            public double getVolume(){\r\n                return Math.PI*super.getRadius()*super.getRadius()*this.ht;\r\n            }\r\n            public String toString(){\r\n                return \"cylinder with radius \"+super.getRadius()+\"and the height=\"+getHeight();\r\n            }\r\n        }\r\n        \r\n        // --------------------testShapes.java--------------------------\r\n        import shapes.circle;\r\n        import shapes.cylinder;\r\n        import java.util.Scanner;\r\n        \r\n        class testshapes {\r\n            public static void main(String[] args) {\r\n                Scanner sc = new Scanner(System.in);\r\n                System.out.println(\"enter rad for circle\");\r\n                circle c = new circle(sc.nextDouble());\r\n                System.out.println(c);\r\n                System.out.println(\"area =\" + c.getSurfaceArea());\r\n                System.out.println(\"permeter=\" + c.getPerimeter());\r\n                System.out.println(\"enter hgt for cylinder\");\r\n                cylinder cy = new cylinder(c.getRadius(), sc.nextDouble());\r\n        \r\n                System.out.println(\"the volume=\" + cy.getVolume());\r\n                System.out.println(\"the area by clin for circle is=\" + cy.getSurfaceArea());\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`Design a StackException class which extends Exception`,\r\n        code:`\r\n        class StackException extends Exception {\r\n            private String msg;\r\n        \r\n            StackException() {\r\n                msg = \" OOPS! an error occured \";\r\n            }\r\n        \r\n            StackException(String msg) {\r\n                this.msg = msg;\r\n            }\r\n        \r\n            String getter() {\r\n                return msg;\r\n            }\r\n        \r\n            void setter(String msg) {\r\n                this.msg = msg;\r\n            }\r\n        \r\n            public String toString() {\r\n                return msg;\r\n            }\r\n        }\r\n        \r\n        class Stack {\r\n            private int arr[] = new int[5];\r\n            private int top;\r\n        \r\n            Stack() {\r\n                top = -1;\r\n            }\r\n        \r\n            void push(int ele) throws StackException {\r\n                if (top == 4) {\r\n                    StackException e = new StackException(\" OOPS! it's an Overflow \");\r\n                    throw e;\r\n                } else {\r\n                    arr[++top] = ele;\r\n                }\r\n            }\r\n        \r\n            int pop() throws StackException {\r\n                if (top == -1) {\r\n                    StackException e = new StackException(\" OOPS! it's an Underflow \");\r\n                    throw e;\r\n                }\r\n                return arr[top--];\r\n            }\r\n        \r\n        }\r\n        \r\n        class Testing {\r\n            public static void main(String args[]) {\r\n                int i;\r\n                Stack s1 = new Stack();\r\n                for (i = 0; i < 6; i++) {\r\n                    try {\r\n                        s1.push(1);\r\n                    } catch (StackException e) {\r\n                        System.out.println(e);\r\n                    }\r\n                }\r\n                for (i = 0; i < 6; i++) {\r\n                    try {\r\n                        System.out.println(s1.pop());\r\n                    } catch (StackException e) {\r\n                        System.out.println(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        `,\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`Implement Producer Consumer problem`,\r\n        code:`\r\n        class Q {\r\n            int n;\r\n            boolean status = false;\r\n        \r\n            synchronized void put(int n) {\r\n                if (status == true)\r\n                    try {\r\n                        wait();\r\n                    } catch (InterruptedException e) {\r\n                        System.out.println(e);\r\n                    }\r\n                this.n = n;\r\n                status = true;\r\n                System.out.println(\"Put \" + n);\r\n                notify();\r\n            }\r\n        \r\n            synchronized int get() {\r\n                if (status == false)\r\n                    try {\r\n                        wait();\r\n                    } catch (InterruptedException e) {\r\n                        System.out.println(e);\r\n                    }\r\n                status = false;\r\n                System.out.println(\"Got \" + n);\r\n                notify();\r\n                return n;\r\n            }\r\n        }\r\n        \r\n        class producer extends Thread {\r\n            Q buff;\r\n        \r\n            producer(Q q) {\r\n                buff = q;\r\n            }\r\n        \r\n            public void run() {\r\n                int i = 1;\r\n                while (true) {\r\n                    buff.put(i++);\r\n                }\r\n            }\r\n        }\r\n        \r\n        class consumer extends Thread {\r\n            Q buff;\r\n        \r\n            consumer(Q q) {\r\n                buff = q;\r\n            }\r\n        \r\n            public void run() {\r\n                while (true) {\r\n                    buff.get();\r\n                }\r\n            }\r\n        }\r\n        \r\n        class dem_TC {\r\n            public static void main(String arg[]) {\r\n                Q q = new Q();\r\n                producer p = new producer(q);\r\n                consumer c = new consumer(q);\r\n                c.start();\r\n                p.start();\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`Applet program to display the house using Graphics`,\r\n        code:`\r\n        import java.awt.Color;\r\n        import java.awt.Graphics;\r\n        import java.awt.Polygon;\r\n        import java.applet.Applet;\r\n\r\n        /*\r\n        <applet code=\"house.class\" width=400 height=300>\r\n        </applet>\r\n        */\r\n        public class house extends Applet {\r\n            public void paint(Graphics g) {\r\n                // house base\r\n                g.setColor(Color.red);\r\n                g.fillRect(50, 90, 200, 100);\r\n                // house outlines\r\n                g.setColor(Color.blue);\r\n                g.drawRect(50, 90, 200, 100);\r\n                // roof\r\n                Polygon roof = new Polygon();\r\n                roof.addPoint(50, 90);\r\n                roof.addPoint(150, 150);\r\n                roof.addPoint(250, 90);\r\n                g.setColor(new Color(218, 165, 32));\r\n                g.fillPolygon(roof);\r\n                g.setColor(Color.black);\r\n                g.drawPolygon(roof);\r\n\r\n                // windows\r\n                g.setColor(Color.blue);\r\n                g.drawLine(75, 123, 105, 123);\r\n                g.drawLine(190, 110, 190, 134);\r\n                g.fillRect(70, 110, 5, 25);\r\n                g.fillRect(105, 110, 5, 25);\r\n\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`Applet that displays a scrolling or animated banner with text.`,\r\n        code:`\r\n        import java.awt.*;\r\n\r\n        import java.applet.Applet;\r\n        \r\n        /*\r\n        <applet code=\"textBanner.class\" width=400 height=300>\r\n        </applet>\r\n        */\r\n        public class textBanner extends Applet implements Runnable {\r\n            String ss;\r\n        \r\n            public void init() {\r\n                ss = \"Hi How are you\";\r\n                try {\r\n                    Thread t = new Thread(this);\r\n                    t.start();\r\n                } catch (Exception e) {\r\n                    System.out.println(e);\r\n                }\r\n            }\r\n        \r\n            public void paint(Graphics g) {\r\n                g.drawString(ss, 20, 30);\r\n                g.setFont(new Font(\"Arial\", Font.PLAIN, 30));\r\n            }\r\n        \r\n            public void run() {\r\n                while (true) {\r\n                    char c = ss.charAt(0);\r\n                    String s1 = ss.substring(1, ss.length());\r\n                    ss = s1 + c;\r\n                    repaint();\r\n                    try {\r\n                        Thread.sleep(1000);\r\n                    } catch (Exception e) {\r\n                        System.out.println(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`a login form with fields for username and password.`,\r\n        code:`\r\n        import java.awt.event.*;\r\n        import javax.swing.*;\r\n        import java.awt.*;\r\n        \r\n        public class login extends JFrame implements ActionListener {\r\n            Button b1, b2;\r\n            TextField u;\r\n            JPasswordField p;\r\n            JLabel us, pa, er;\r\n        \r\n            public login() {\r\n                setLayout(new FlowLayout());\r\n                b1 = new Button(\"SUBMIT\");\r\n                b2 = new Button(\"CLEAR\");\r\n                b1.addActionListener(this);\r\n                b2.addActionListener(this);\r\n                u = new TextField(20);\r\n                p = new JPasswordField(16);\r\n                us = new JLabel(\"Username\");\r\n                pa = new JLabel(\"password\");\r\n                JPanel p1 = new JPanel(new FlowLayout());\r\n                p1.add(us);\r\n                p1.add(u);\r\n                p1.add(pa);\r\n                p1.add(p);\r\n                p1.add(b1);\r\n                p1.add(b2);\r\n                add(p1);\r\n                er = new JLabel();\r\n                add(er);\r\n                setBounds(100, 100, 400, 300);\r\n                setVisible(true);\r\n            }\r\n        \r\n            public static void main(String arg[]) {\r\n                new login();\r\n            }\r\n        \r\n            public void actionPerformed(ActionEvent e) {\r\n                String s = e.getActionCommand();\r\n                String usr, pass;\r\n                usr = u.getText();\r\n                pass = new String(p.getPassword());\r\n                if (s.equals(\"SUBMIT\")) {\r\n                    if (usr.isEmpty() || pass.isEmpty())\r\n                        er.setText(\"ENTER ALL FIELDS\");\r\n                    else if ((usr.equals(\"y22cm107\")) && (pass.equals(\"1234\")))\r\n                        er.setText(\"Loggined succesfully\");\r\n                    else\r\n                        er.setText(\"Username or Password is incorrect\");\r\n                } else if (s.equals(\"CLEAR\")) {\r\n                    u.setText(\"\");\r\n                    p.setText(\"\");\r\n                    er.setText(\"\");\r\n                }\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`JTree`,\r\n        code:`\r\n        import javax.swing.*;\r\n        import javax.swing.JFrame;\r\n        import javax.swing.JScrollPane;\r\n        import javax.swing.tree.DefaultMutableTreeNode;\r\n        \r\n        /*\r\n         <applet code=\"jtree.class\" width=400 height=300>\r\n         </applet>\r\n        */\r\n        public class jtree extends JFrame {\r\n            JTree tree;\r\n        \r\n            public jtree() {\r\n                super(\"JTREE\");\r\n                DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"RVRJC\");\r\n        \r\n                DefaultMutableTreeNode cb = new DefaultMutableTreeNode(\"Circuit branches\");\r\n                root.add(cb);\r\n        \r\n                DefaultMutableTreeNode cs = new DefaultMutableTreeNode(\"Computer sciemce\");\r\n                cb.add(cs);\r\n                DefaultMutableTreeNode cse = new DefaultMutableTreeNode(\"CSE\");\r\n                cs.add(cse);\r\n                DefaultMutableTreeNode cm = new DefaultMutableTreeNode(\"CSE(AI&ML)\");\r\n                cs.add(cm);\r\n                DefaultMutableTreeNode csd = new DefaultMutableTreeNode(\"CSE(DS)\");\r\n                cs.add(csd);\r\n        \r\n                DefaultMutableTreeNode ncs = new DefaultMutableTreeNode(\"Non Circuit Branches\");\r\n                root.add(ncs);\r\n        \r\n                DefaultMutableTreeNode ece = new DefaultMutableTreeNode(\"ECE\");\r\n                ncs.add(ece);\r\n                DefaultMutableTreeNode eee = new DefaultMutableTreeNode(\"EEE\");\r\n                ncs.add(eee);\r\n        \r\n                tree = new JTree(root);\r\n                JScrollPane jsp = new JScrollPane(tree);\r\n                add(jsp);\r\n                setVisible(true);\r\n            }\r\n        \r\n            public static void main(String args[]) {\r\n                new jtree();\r\n            }\r\n        }\r\n        \r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`Design JTabbedPane with three tabs`,\r\n        code:`\r\n        import javax.swing.*;\r\n        import java.awt.FlowLayout;\r\n        import java.awt.GridLayout;\r\n        \r\n        public class tabs {\r\n            public static void main(String args[]) {\r\n                JFrame frame = new JFrame(\"Jtabs\");\r\n                frame.setSize(400, 300);\r\n                frame.setLayout(new FlowLayout());\r\n        \r\n                JTabbedPane pane = new JTabbedPane();\r\n        \r\n                JPanel panel1 = new JPanel();\r\n                panel1.setLayout(new GridLayout(4, 1));\r\n                JCheckBox cb1 = new JCheckBox(\"Math-I\");\r\n                JCheckBox cb2 = new JCheckBox(\"Chemistry\");\r\n                JCheckBox cb3 = new JCheckBox(\"FCS\");\r\n                JCheckBox cb4 = new JCheckBox(\"ESCC\");\r\n                panel1.add(cb1);\r\n                panel1.add(cb2);\r\n                panel1.add(cb3);\r\n                panel1.add(cb4);\r\n        \r\n                JPanel panel2 = new JPanel();\r\n                panel2.setLayout(new GridLayout(4, 1));\r\n                JRadioButton rb1 = new JRadioButton(\"Math-II\");\r\n                JRadioButton rb2 = new JRadioButton(\"physics\");\r\n                JRadioButton rb3 = new JRadioButton(\"Data Structures\");\r\n                JRadioButton rb4 = new JRadioButton(\"Python\");\r\n                panel2.add(rb1);\r\n                panel2.add(rb2);\r\n                panel2.add(rb3);\r\n                panel2.add(rb4);\r\n        \r\n                JPanel panel3 = new JPanel();\r\n                panel3.setLayout(new GridLayout());\r\n                String[] data = {\r\n                        \"statistics\",\r\n                        \"oops\",\r\n                        \"dbms\",\r\n                        \"dms\"\r\n                };\r\n                JList<String> list = new JList<>(data);\r\n                panel3.add(list);\r\n        \r\n                pane.addTab(\"1 year 1 sem courses\", panel1);\r\n                pane.addTab(\"1 year 2 sem courses\", panel2);\r\n                pane.addTab(\"2 year 1 sem courses\", panel3);\r\n        \r\n                frame.add(pane);\r\n                frame.setVisible(true);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            }\r\n        }\r\n        \r\n        `,\r\n    },\r\n    {\r\n        unit:2,\r\n        title:`Display the following Data with JTable`,\r\n        code:`\r\n        import javax.swing.*;\r\n\r\n        public class jtable extends JFrame {\r\n            public jtable() {\r\n                super(\"j table \");\r\n                setBounds(100, 100, 400, 300);\r\n                String[][] data = {\r\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\r\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\r\n                        { \"1\", \"e1\", \"mohan\", \"1000\" },\r\n                        { \"1\", \"e1\", \"mohan\", \"1000\" }\r\n                };\r\n                String header[] = { \"sno\", \"employee id\", \"name\", \"salary\" };\r\n                JTable jt = new JTable(data, header);\r\n                JScrollPane jsp = new JScrollPane(jt);\r\n                add(jsp);\r\n                setVisible(true);\r\n            }\r\n        \r\n            public static void main(String args[]) {\r\n                new jtable();\r\n            }\r\n        }\r\n        `,\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`Create a generic function to sort n integers`,\r\n        code:`\r\n        import java.util.Arrays;\r\n\r\n        public class Sort {\r\n\r\n            public static void main(String[] args) {\r\n                int[] numbers = {5, 2, 8, 1, 7};\r\n                \r\n                System.out.print(\"Original array: \");\r\n                printArray(numbers);\r\n                \r\n                genericSort(numbers);\r\n                \r\n                System.out.print(\"Sorted array: \");\r\n                printArray(numbers);\r\n            }\r\n\r\n            public static void genericSort(int[] arr) {\r\n                Arrays.sort(arr);\r\n            }\r\n\r\n            public static void printArray(int[] arr) {\r\n                for (int i=0; i<arr.length;i++) {\r\n                    System.out.print(arr[i] + \" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n        }`\r\n    },\r\n    {\r\n        unit:1,\r\n        title:`Simple Calculator`,\r\n        code:`\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class calsopr extends Frame implements ActionListener {\r\n    String val, op;\r\n    Button b1[] = new Button[16];\r\n    TextField tx1;\r\n    Panel p1;\r\n    int F, S, R, C;\r\n\r\n    public calsopr() {\r\n        val = \"0\";\r\n        op = \"\";\r\n        F = S = R = C = 0;\r\n        p1 = new Panel();\r\n        tx1 = new TextField(\"0\", 15);\r\n        tx1.setEditable(false);\r\n        p1.setLayout(new GridLayout(4, 4, 5, 5)); // Use setLayout instead of setEditable\r\n        for (int i = 0; i < 10; i++) {\r\n            b1[i] = new Button(\"\" + i); // Remove the space before the numbers\r\n            b1[i].addActionListener(this);\r\n        }\r\n        b1[10] = new Button(\"+\");\r\n        b1[10].addActionListener(this);\r\n        b1[11] = new Button(\"-\");\r\n        b1[11].addActionListener(this);\r\n        b1[12] = new Button(\"*\");\r\n        b1[12].addActionListener(this);\r\n        b1[13] = new Button(\"/\");\r\n        b1[13].addActionListener(this);\r\n        b1[14] = new Button(\"=\");\r\n        b1[14].addActionListener(this);\r\n        b1[15] = new Button(\"C\");\r\n        b1[15].addActionListener(this);\r\n        for (int i = 0; i < 16; i++) {\r\n            p1.add(b1[i]);\r\n        }\r\n        add(tx1, BorderLayout.NORTH);\r\n        add(p1, BorderLayout.CENTER);\r\n        setSize(200, 200);\r\n        setVisible(true);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent ae) {\r\n        String type = ae.getActionCommand();\r\n        if (type.equals(\"+\") || type.equals(\"-\") || type.equals(\"*\") || type.equals(\"/\"))\r\n            op = type;\r\n        if (type.matches(\"\\\\d\")) {\r\n            tx1.setText(type);\r\n            if (C == 0) {\r\n                F = Integer.parseInt(tx1.getText());\r\n                C = 1;\r\n            } else {\r\n                S = Integer.parseInt(tx1.getText());\r\n                C = 0;\r\n            }\r\n        }\r\n        if (type.equals(\"=\")) {\r\n            if (op.equals(\"+\")) {\r\n                R = F + S;\r\n            } else if (op.equals(\"-\")) {\r\n                R = F - S;\r\n            } else if (op.equals(\"*\")) {\r\n                R = F * S;\r\n            } else if (op.equals(\"/\")) {\r\n                if (S != 0) {\r\n                    R = F / S;\r\n                } else {\r\n                    // Handle division by zero error\r\n                    tx1.setText(\"Error\");\r\n                    return;\r\n                }\r\n            }\r\n            tx1.setText(\"\" + R);\r\n        }\r\n        if (type.equals(\"C\")) {\r\n            F = S = R = 0;\r\n            C = 0;\r\n            tx1.setText(\"0\");\r\n        }\r\n    }\r\n\r\n    public static void main(String s[]) {\r\n        new calsopr();\r\n    }\r\n}\r\n\r\n        `,\r\n    },\r\n]"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CACpB;EACIC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAG,4BAA2B;EACnCC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,oCAAmC;EAC1CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,sCAAqC;EAC5CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,uDAAsD;EAC7DC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,qCAAoC;EAC3CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,oDAAmD;EAC1DC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,gEAA+D;EACtEC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,qDAAoD;EAC3DC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,OAAM;EACbC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,oCAAmC;EAC1CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,wCAAuC;EAC9CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,8CAA6C;EACpDC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACIF,IAAI,EAAC,CAAC;EACNC,KAAK,EAAE,mBAAkB;EACzBC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}